<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>NonSENS - sensors monitor</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
</head>

<body>

<table id="main">
    <thead>
        <tr>
            <td class="sysinfo" colspan="{{ len . }}">
                <div style="display: inline-grid; grid-template-columns: 33% 33% 34%; grid-template-rows: 50% 50%; width: 100%;">
                    <div style="border: 1px black solid;">1</div>
                    <div style="border: 1px black solid;">2</div>
                    <div style="border: 1px black solid;">3</div>
                    <div style="border: 1px black solid;">4</div>
                    <div style="border: 1px black solid;">5</div>
                    <div style="border: 1px black solid;">6</div>
                </div>
            </td>
        </tr>
    </thead>
    <tbody>
    <tr>
    {{ range $col, $groups := . }}
        <td class="column" id="{{ $col }}">
            {{ range $i, $gr := $groups }}
                <fieldset class="group">
                    <legend>
                        [&nbsp;{{ $gr.Id }}&nbsp;]
                    </legend>
                    <div class="group" id="{{ $gr.Id }}">
                        {{ range $j, $se := $gr.Sensors }}
                            <div class="sensor" id="sensor{{ $se.Id }}" onClick="popupEditor('{{ $se.Id }}');"></div>
                        {{ end }}
                    </div>
                </fieldset>
            {{ end }}
        </td>
    {{ end }}
    </tr>
    </tbody>
</table>

<!-- editor window -->
<div class="editor" id="editor">
    <table class="editor">
        <tr><td><div id="outwindow"></div></td></tr>
        <tr><td><button onClick="closeEditor();">CLOME ME</button></td></tr>
    </table>
</div>

<script>

function closeEditor() {
    document.getElementById("editor").style.display = 'none';
};

function popupEditor(data) {
    document.getElementById("editor").style.display = 'block';
    document.getElementById("outwindow").innerHTML = data;
};


function loadCSS() {
    document.getElementsByTagName('head')[0].insertAdjacentHTML(
        'beforeend',
        '<link rel="stylesheet" type="text/css" href="/css/nonsens.css?'+Date.now()+'" />');
};

window.onload = function () {
    loadCSS();
};

var wsUrl = "ws://" + window.location.hostname + ":" + window.location.port + "/ws";

loop();

async function loop() {

    while (1) {

        var reconnect = false;
        var socket = new WebSocket(wsUrl);

        socket.onopen = function() {
            socket.send("ACK");
            reconnect = false;
        };

        socket.onmessage = function(msg) {
            const obj = JSON.parse(msg.data);
            var type = obj.type;
            var id = obj.id;
            var body = obj.body;
            var output = document.getElementById(type+id);
            output.innerHTML = body;
            socket.send("ACK");
        };

        socket.onclose = function(ev) {
            reconnect = true;
        };

        await waitUntil(() => reconnect === true);

    };

};

async function waitUntil(condition, time = 2000) {
    while (!condition()) {
        await new Promise((resolve) => setTimeout(resolve, time));
    }
}

</script>

</body>

</html>
